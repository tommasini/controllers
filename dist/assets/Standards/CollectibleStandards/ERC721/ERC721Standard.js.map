{"version":3,"file":"ERC721Standard.js","sourceRoot":"","sources":["../../../../../src/assets/Standards/CollectibleStandards/ERC721/ERC721Standard.ts"],"names":[],"mappings":"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","sourcesContent":["import { abiERC721 } from '@metamask/metamask-eth-abis';\nimport { Web3 } from '../../standards-types';\nimport { getFormattedIpfsUrl, timeoutFetch } from '../../../../util';\nimport {\n  ERC721_INTERFACE_ID,\n  ERC721_METADATA_INTERFACE_ID,\n  ERC721_ENUMERABLE_INTERFACE_ID,\n  ERC721,\n} from '../../../../constants';\n\nexport class ERC721Standard {\n  private web3: Web3;\n\n  constructor(web3: Web3) {\n    this.web3 = web3;\n  }\n\n  /**\n   * Query if contract implements ERC721Metadata interface.\n   *\n   * @param address - ERC721 asset contract address.\n   * @returns Promise resolving to whether the contract implements ERC721Metadata interface.\n   */\n  contractSupportsMetadataInterface = async (\n    address: string,\n  ): Promise<boolean> => {\n    return this.contractSupportsInterface(\n      address,\n      ERC721_METADATA_INTERFACE_ID,\n    );\n  };\n\n  /**\n   * Query if contract implements ERC721Enumerable interface.\n   *\n   * @param address - ERC721 asset contract address.\n   * @returns Promise resolving to whether the contract implements ERC721Enumerable interface.\n   */\n  contractSupportsEnumerableInterface = async (\n    address: string,\n  ): Promise<boolean> => {\n    return this.contractSupportsInterface(\n      address,\n      ERC721_ENUMERABLE_INTERFACE_ID,\n    );\n  };\n\n  /**\n   * Query if contract implements ERC721 interface.\n   *\n   * @param address - ERC721 asset contract address.\n   * @returns Promise resolving to whether the contract implements ERC721 interface.\n   */\n  contractSupportsBase721Interface = async (\n    address: string,\n  ): Promise<boolean> => {\n    return this.contractSupportsInterface(address, ERC721_INTERFACE_ID);\n  };\n\n  /**\n   * Enumerate assets assigned to an owner.\n   *\n   * @param address - ERC721 asset contract address.\n   * @param selectedAddress - Current account public address.\n   * @param index - A collectible counter less than `balanceOf(selectedAddress)`.\n   * @returns Promise resolving to token identifier for the 'index'th asset assigned to 'selectedAddress'.\n   */\n  getCollectibleTokenId = async (\n    address: string,\n    selectedAddress: string,\n    index: number,\n  ): Promise<string> => {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.tokenOfOwnerByIndex(\n        selectedAddress,\n        index,\n        (error: Error, result: string) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result);\n        },\n      );\n    });\n  };\n\n  /**\n   * Query for tokenURI for a given asset.\n   *\n   * @param address - ERC721 asset contract address.\n   * @param tokenId - ERC721 asset identifier.\n   * @returns Promise resolving to the 'tokenURI'.\n   */\n  getTokenURI = async (address: string, tokenId: string): Promise<string> => {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    const supportsMetadata = await this.contractSupportsMetadataInterface(\n      address,\n    );\n    if (!supportsMetadata) {\n      throw new Error('Contract does not support ERC721 metadata interface.');\n    }\n    return new Promise<string>((resolve, reject) => {\n      contract.tokenURI(tokenId, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Query for name for a given asset.\n   *\n   * @param address - ERC721 asset contract address.\n   * @returns Promise resolving to the 'name'.\n   */\n  getAssetName = async (address: string): Promise<string> => {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.name((error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Query for symbol for a given asset.\n   *\n   * @param address - ERC721 asset contract address.\n   * @returns Promise resolving to the 'symbol'.\n   */\n  getAssetSymbol = async (address: string): Promise<string> => {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.symbol((error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  };\n\n  /**\n   * Query for owner for a given ERC721 asset.\n   *\n   * @param address - ERC721 asset contract address.\n   * @param tokenId - ERC721 asset identifier.\n   * @returns Promise resolving to the owner address.\n   */\n  async getOwnerOf(address: string, tokenId: string): Promise<string> {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<string>((resolve, reject) => {\n      contract.ownerOf(tokenId, (error: Error, result: string) => {\n        /* istanbul ignore if */\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Query if a contract implements an interface.\n   *\n   * @param address - Asset contract address.\n   * @param interfaceId - Interface identifier.\n   * @returns Promise resolving to whether the contract implements `interfaceID`.\n   */\n  private contractSupportsInterface = async (\n    address: string,\n    interfaceId: string,\n  ): Promise<boolean> => {\n    const contract = this.web3.eth.contract(abiERC721).at(address);\n    return new Promise<boolean>((resolve, reject) => {\n      contract.supportsInterface(\n        interfaceId,\n        (error: Error, result: boolean) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result);\n        },\n      );\n    });\n  };\n\n  /**\n   * Query if a contract implements an interface.\n   *\n   * @param address - Asset contract address.\n   * @param ipfsGateway - The user's preferred IPFS gateway.\n   * @param tokenId - tokenId of a given token in the contract.\n   * @returns Promise resolving an object containing the standard, tokenURI, symbol and name of the given contract/tokenId pair.\n   */\n  getDetails = async (\n    address: string,\n    ipfsGateway: string,\n    tokenId?: string,\n  ): Promise<{\n    standard: string;\n    tokenURI: string | undefined;\n    symbol: string | undefined;\n    name: string | undefined;\n    image: string | undefined;\n  }> => {\n    const [isERC721, supportsMetadata] = await Promise.all([\n      this.contractSupportsBase721Interface(address),\n      this.contractSupportsMetadataInterface(address),\n    ]);\n    let tokenURI, symbol, name, image;\n    if (supportsMetadata) {\n      [symbol, name] = await Promise.all([\n        this.getAssetSymbol(address),\n        this.getAssetName(address),\n      ]);\n\n      if (tokenId) {\n        tokenURI = await this.getTokenURI(address, tokenId);\n        if (tokenURI.startsWith('ipfs://')) {\n          tokenURI = getFormattedIpfsUrl(ipfsGateway, tokenURI, true);\n        }\n\n        try {\n          const response = await timeoutFetch(tokenURI);\n          const object = await response.json();\n          image = object?.image;\n          if (image?.startsWith('ipfs://')) {\n            image = getFormattedIpfsUrl(ipfsGateway, image, true);\n          }\n        } catch {\n          // ignore\n        }\n      }\n    }\n\n    if (isERC721) {\n      return {\n        standard: ERC721,\n        tokenURI,\n        symbol,\n        name,\n        image,\n      };\n    }\n\n    throw new Error(\"This isn't a valid ERC721 contract\");\n  };\n}\n"]}